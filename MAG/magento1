Z powodu błędu w wysiwigu dodaje bzdurne adresy do obrazków jeśli dynamiczne adresy są włączone. Wobec tego należy zmienić : SYSTEM->KONFIGURACJA->ZARZĄDZANIE ZAWARTOŚCIĄ : WYSIWIG : STATYCZNE ADRESY na TAK
a następnie zmienić kod źródłowy: adres strony/app/code/core/Mage/cms/helper/Wysiwyg/Images:
    public function getImageHtmlDeclaration($filename, $renderAsTag = false)
    {
        $fileurl = $this->getCurrentUrl() . $filename;
        $mediaPath = str_replace(Mage::getBaseUrl('media'), '', $fileurl);
        $directive = sprintf('{{media url="%s"}}', $mediaPath);
        if ($renderAsTag) {
            $html = sprintf('<img src="%s" alt="" />', $this->isUsingStaticUrlsAllowed() ? $fileurl : $directive);
        } else {
            if ($this->isUsingStaticUrlsAllowed()) {
			//Zbigg - due to wysiwig bug, must replace code <tutaj>
                $html = $this->getBaseUrl().''.$mediaPath;
			//<koniec tutaj>	
            } else {
                $directive = Mage::helper('core')->urlEncode($directive);
                $html = Mage::helper('adminhtml')->getUrl('*/cms_wysiwyg/directive', array('___directive' => $directive));
            }
        }
        return $html;
    }
//================================================================================================================
KONTAKT CODE for CMS PAGE:
{{block type="core/template" name="contactForm" form_action="/contacts/index/post" template="contacts/form.phtml"}}
//====================================================================================================================
zaplecze obrazek do zamówienia path:
/app/design/adminhtml/default/default/template/sales/
//=======================================================================================================================
TOP MENU: 
change layout:
            <block type="core/text_list" name="top.menu" as="topMenu" translate="label">
                <label>Navigation Bar</label>
                <block type="page/html_topmenu" name="catalog.topnav" template="page/html/topmenu.phtml">
                 <block type="page/html_topmenu_renderer" name="catalog.topnav.renderer" template="page/html/topmenu/renderer.phtml"/>
                </block>
            </block>

path template: page/html/topmenu.phtml - code:
----------------------------------------------
<?php $_menu = $this->getHtml('level-top') ?>
<?php if($_menu): ?>
<nav class="navbar navbar-default">
<div class="container-fluid">
	<div class="navbar-header">
		<button class="navbar-toggle collapsed" aria-controls="navbar" aria-expanded="false" data-target="#navbar" data-toggle="collapse" type="button">
			<span class="sr-only">Toggle navigation</span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>
	</div>
<div id="navbar" class="navbar-collapse collapse">
  <ul class="nav navbar-nav">
	<?php echo $_menu ?>
  </ul>
</div>
</div>
</nav>
<?php endif ?>
path template: page/html/topmenu/renderer.phtml - code:
-------------------------------------------------------
$html = '';

$children = $menuTree->getChildren();
$parentLevel = $menuTree->getLevel();
$childLevel = is_null($parentLevel) ? 0 : $parentLevel + 1;

$counter = 1;
$childrenCount = $children->count();

$parentPositionClass = $menuTree->getPositionClass();
$itemPositionClassPrefix = $parentPositionClass ? $parentPositionClass . '-' : 'nav-';

foreach ($children as $child) {
    $child->setLevel($childLevel);
    $child->setIsFirst($counter == 1);
    $child->setIsLast($counter == $childrenCount);
    $child->setPositionClass($itemPositionClassPrefix . $counter);

    $outermostClassCode = 'level'. $childLevel;
    $_hasChildren = ($child->hasChildren()) ? 'has-children' : '';

    //$html .= '<li '. $this->_getRenderedMenuItemAttributes($child) .'>';
	if($_hasChildren){
		$html .= '<li class="dropdown '.$_hasChildren.'">';
	}else{
	    $html .= '<li class="">';	
	}
    //$html .= '<a href="'. $child->getUrl() .'" class="'. $outermostClassCode .' '. $_hasChildren .'">'. $this->escapeHtml($this->__($child->getName())) .'</a>';
	$html .= '<a class="dropdown-toggle '. $outermostClassCode .' '. $_hasChildren .'" aria-expanded="false" aria-haspopup="true" role="button" data-toggle="dropdown" href="'.$child->getUrl().'">'.$this->escapeHtml($this->__($child->getName())).'</a>';

    if (!empty($childrenWrapClass)) {
        $html .= '<div class="'. $childrenWrapClass .'">';
    }

    $nextChildLevel = $childLevel + 1;

    if (!empty($_hasChildren)) {
       // $html .= '<ul class="level'. $childLevel .'">';
	   if($childLevel != 0){
		   $html .= '<ul class="dropdown-menu level'. $childLevel .' dropdown-menu-to-right">';
	   }else{
		 $html .= '<ul class="dropdown-menu level'. $childLevel .'">';  
	   }
		
       // $html .=     '<li class="level'. $nextChildLevel .' view-all">';
       // $html .=         '<a class="level'. $nextChildLevel .'" href="'. $child->getUrl() .'">';
       // $html .=             $this->__('View All') . ' ' . $this->escapeHtml($this->__($child->getName()));
       // $html .=         '</a>';
       // $html .=     '</li>';
        $html .=     $this->render($child, $childrenWrapClass); 
        $html .= '</ul>';
    }

    if (!empty($childrenWrapClass)) {
        $html .= '</div>';
    }

    $html .= '</li>';

    $counter++;
}

return $html;

//================================================== CODE FOR MOST VIEWED ===========================================
 
<div class="page-header-holder">
	<h3 class="main-header-h3">Najczęściej wybierane produkty</h3>
</div>
<?php  // MOST VIEWED PRODUCTS
        $storeId    = Mage::app()->getStore()->getId();
        $products = Mage::getResourceModel('reports/product_collection')
            ->addOrderedQty()
            ->addAttributeToSelect('*')
            ->addAttributeToSelect(array('name', 'price', 'small_image'))
            ->setStoreId($storeId)
            ->addStoreFilter($storeId)
            ->addViewsCount();
        Mage::getSingleton('catalog/product_status')->addVisibleFilterToCollection($products);
        Mage::getSingleton('catalog/product_visibility')->addVisibleInCatalogFilterToCollection($products);
 
        $products->setPageSize(4)->setCurPage(1);
        $this->setProductCollection($products);

?>
<?php if (($_products = $this->getProductCollection()) && $_products->getSize()): ?>
<div class=" most_viewed">
<div class="row">
<?php $_collectionSize = 4;//count($_products->getItems()); echo $_collectionSize; ?>

<?php $i=1; foreach ($_products->getItems() as $_product): ?>
<div class="col-lg-3" style="padding: 0;">
    <div class="most-viewed-list <?php if($i%4==0 or $i==$_collectionSize){echo 'mvl-last';} ?> ">	                    
     
                <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" class="product-image">
                    <?php $_imgSize = 210; ?>
                    <img class="img-responsive prod-list-image" id="product-collection-image_<?php echo $_product->getId(); ?>"
                         src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image'); ?>"
                         alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                </a>
			<div class="prod-list-buttons-block" id="buttons-block_<?php echo $_product->getId(); ?>">
			<button class="btn-add-to-card-prod-list" onclick="setLocation('<?php echo $this->helper('checkout/cart')->getAddUrl($_product); ?>')"></button>
			</div>
            <p class="product-name-prod-list"><?php echo $this->htmlEscape($_product->getName()) ?></p>
                      
             <p class="product-price-prod-list"><?php echo number_format($_product->getPrice($_product, true),2); ?><span class="list-pln"> PLN</span></p>
    </div>
</div>
<?php if($i%4==0){echo '</div>';} ?> 
<?php $i++; endforeach; $kol = $_collectionSize; ?>
</div><!-- end row -->
</div><!-- end most viewed -->
<!-- END MOST VIEWED PRODUCTS -->
//================================================ CONFIGURABLE SHIPPING WEIGHT HACK ===========================================
Magento does not read configurable product weight from product, but reads it from simple item instead. Here is some hack to make it work my way. It goes to:
app/code/core/Mage/Sales/Model/Quote/Address/Total/Shipping.php
may change entire code or just get neede fragment:
class Mage_Sales_Model_Quote_Address_Total_Shipping extends Mage_Sales_Model_Quote_Address_Total_Abstract
{
    public function __construct()
    {
        $this->setCode('shipping');
    }

    /**
     * Collect totals information about shipping
     *
     * @param   Mage_Sales_Model_Quote_Address $address
     * @return  Mage_Sales_Model_Quote_Address_Total_Shipping
     */
    public function collect(Mage_Sales_Model_Quote_Address $address)
    {
        parent::collect($address);

        $oldWeight = $address->getWeight();
        $address->setWeight(0);
        $address->setFreeMethodWeight(0);
        $this->_setAmount(0)
            ->_setBaseAmount(0);

        $items = $this->_getAddressItems($address);
        if (!count($items)) {
            return $this;
        }

        $method     = $address->getShippingMethod();
        $freeAddress= $address->getFreeShipping();

        $addressWeight      = $address->getWeight();
        $freeMethodWeight   = $address->getFreeMethodWeight();

        $addressQty = 0;

        foreach ($items as $item) {
            /**
             * Skip if this item is virtual
             */
            if ($item->getProduct()->isVirtual()) {
                continue;
            }

            /**
             * Children weight we calculate for parent
             */
            if ($item->getParentItem()) {
                continue;
            }

            if ($item->getHasChildren() && $item->isShipSeparately()) {
                foreach ($item->getChildren() as $child) {
                    if ($child->getProduct()->isVirtual()) {
                        continue;
                    }
                    $addressQty += $child->getTotalQty();

                    if (!$item->getProduct()->getWeightType()) {
                           $itemWeight = $child->getWeight();
                        $itemQty    = $child->getTotalQty();
                        $rowWeight  = $itemWeight*$itemQty;
                        $addressWeight += $rowWeight;
                        if ($freeAddress || $child->getFreeShipping()===true) {
                            $rowWeight = 0;
                        } elseif (is_numeric($child->getFreeShipping())) {
                            $freeQty = $child->getFreeShipping();
                            if ($itemQty>$freeQty) {
                                $rowWeight = $itemWeight*($itemQty-$freeQty);
                            }
                            else {
                                $rowWeight = 0;
                            }
                        }
                        $freeMethodWeight += $rowWeight;
                        $item->setRowWeight($rowWeight);
                    }
                }
                if ($item->getProduct()->getWeightType()) {
                    $itemWeight = $item->getWeight(); 
                    $rowWeight  = $itemWeight*$item->getQty();
                    $addressWeight+= $rowWeight;
                    if ($freeAddress || $item->getFreeShipping()===true) {
                        $rowWeight = 0;
                    } elseif (is_numeric($item->getFreeShipping())) {
                        $freeQty = $item->getFreeShipping();
                        if ($item->getQty()>$freeQty) {
                            $rowWeight = $itemWeight*($item->getQty()-$freeQty);
                        }
                        else {
                            $rowWeight = 0;
                        }
                    }
                    $freeMethodWeight+= $rowWeight;
                    $item->setRowWeight($rowWeight);
                }
            }
            else {
                if (!$item->getProduct()->isVirtual()) {
                    $addressQty += $item->getQty();
                }
	//exactly this item weight is included in our case HELLUX	
	            if($item->getProduct()->isConfigurable()){
					$needed_id = $item->getProduct()->getId();
					$itemWeight = Mage::getResourceModel('catalog/product')->getAttributeRawValue($needed_id, 'weight', 1); 
				}else{
					$itemWeight = $item->getWeight();
				}
    //END ADDITIONAL CODE exactly this item weight is included in our case HELLUX	        
                $rowWeight  = $itemWeight*$item->getQty();
                $addressWeight+= $rowWeight;
                if ($freeAddress || $item->getFreeShipping()===true) {
                    $rowWeight = 0;
                } elseif (is_numeric($item->getFreeShipping())) {
                    $freeQty = $item->getFreeShipping();
                    if ($item->getQty()>$freeQty) {
                        $rowWeight = $itemWeight*($item->getQty()-$freeQty);
                    }
                    else {
                        $rowWeight = 0;
                    }
                }
                $freeMethodWeight+= $rowWeight;
                $item->setRowWeight($rowWeight);
            }
        }

        if (isset($addressQty)) {
            $address->setItemQty($addressQty);
        }

        $address->setWeight($addressWeight);
        $address->setFreeMethodWeight($freeMethodWeight);

        $address->collectShippingRates();

        $this->_setAmount(0)
            ->_setBaseAmount(0);

        $method = $address->getShippingMethod();

        if ($method) {
            foreach ($address->getAllShippingRates() as $rate) {
                if ($rate->getCode()==$method) {
                    $amountPrice = $address->getQuote()->getStore()->convertPrice($rate->getPrice(), false);
                    $this->_setAmount($amountPrice);
                    $this->_setBaseAmount($rate->getPrice());
                    $shippingDescription = $rate->getCarrierTitle() . ' - ' . $rate->getMethodTitle();
                    $address->setShippingDescription(trim($shippingDescription, ' -'));
                    break;
                }
            }
        }

        return $this;
    }

    /**
     * Add shipping totals information to address object
     *
     * @param   Mage_Sales_Model_Quote_Address $address
     * @return  Mage_Sales_Model_Quote_Address_Total_Shipping
     */
    public function fetch(Mage_Sales_Model_Quote_Address $address)
    {
        $amount = $address->getShippingAmount();
        if ($amount != 0 || $address->getShippingDescription()) {
            $title = Mage::helper('sales')->__('Shipping & Handling');
            if ($address->getShippingDescription()) {
                $title .= ' (' . $address->getShippingDescription() . ')';
            }
            $address->addTotal(array(
                'code' => $this->getCode(),
                'title' => $title,
                'value' => $address->getShippingAmount()
            ));
        }
        return $this;
    }

    /**
     * Get Shipping label
     *
     * @return string
     */
    public function getLabel()
    {
        return Mage::helper('sales')->__('Shipping');
    }
}
//===============================================================================


